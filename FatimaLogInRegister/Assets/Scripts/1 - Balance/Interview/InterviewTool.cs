// This code automatically generated by TableCodeGen
//To help read and write CSV files effectively
// Can be found at https://assetstore.unity.com/packages/tools/utilities/csv2table-36443 
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.UI;
using UnityEngine.SceneManagement;
using TMPro;


//This was used for the CSV but will no longer be used at the moment.
public class InterviewTool : MonoBehaviour {

    //add this so public text file can be selected
    public TextAsset file;

    public TextMeshProUGUI textDisplay;
    private int index;
    public float typingSpeed;
    public GameObject continueButton;

    void Start() {
        //StartCoroutine(Type());
        Load(file); // load csv file upon starting
    }

    private void Update() {
        //continueButton.SetActive(true);
    }

    [System.Serializable]
    public class Row {
        public string id;
        public string num;
        public string issue;
        public string question;
        public string positive;
        public string negative;
    }

    List<Row> rowList = new List<Row>();
    bool isLoaded = false;

    public bool IsLoaded() {
        return isLoaded;
    }

    public List<Row> GetRowList() {
        return rowList;
    }

    public void Load(TextAsset csv) {
        rowList.Clear();
        string[][] grid = CsvParser2.Parse(csv.text);
        for (int i = 1; i < grid.Length; i++) {
            Row row = new Row();
            row.id = grid[i][0];
            row.num = grid[i][1];
            row.issue = grid[i][2];
            row.question = grid[i][3];
            row.positive = grid[i][4];
            row.negative = grid[i][5];

            rowList.Add(row);
        }
        isLoaded = true;
    }

    public int NumRows() {
        return rowList.Count;
    }

    public Row GetAt(int i) {
        if (rowList.Count <= i)
            return null;
        return rowList[i];
    }

    public Row Find_id(string find) {
        return rowList.Find(x => x.id == find);
    }
    public List<Row> FindAll_id(string find) {
        return rowList.FindAll(x => x.id == find);
    }
    public Row Find_num(string find) {
        return rowList.Find(x => x.num == find);
    }
    public List<Row> FindAll_num(string find) {
        return rowList.FindAll(x => x.num == find);
    }
    public Row Find_issue(string find) {
        return rowList.Find(x => x.issue == find);
    }
    public List<Row> FindAll_issue(string find) {
        return rowList.FindAll(x => x.issue == find);
    }
    public Row Find_question(string find) {
        return rowList.Find(x => x.question == find);
    }
    public List<Row> FindAll_question(string find) {
        return rowList.FindAll(x => x.question == find);
    }
    public Row Find_positive(string find) {
        return rowList.Find(x => x.positive == find);
    }
    public List<Row> FindAll_positive(string find) {
        return rowList.FindAll(x => x.positive == find);
    }
    public Row Find_negative(string find) {
        return rowList.Find(x => x.negative == find);
    }
    public List<Row> FindAll_negative(string find) {
        return rowList.FindAll(x => x.negative == find);
    }

    IEnumerator Question1() {
        foreach (char letter in Find_id("0").question) {
            textDisplay.text += letter;

            continueButton.SetActive(true);

            if (textDisplay.text == Find_id("0").question) {
                textDisplay.text = "";
                //continueButton.SetActive(false);
            }
        }
        yield return new WaitForSeconds(typingSpeed);
    }

    IEnumerator Positive1() {

        //Letter by letter this shows the POSITIVE response for id: 0 (ques 1)
        foreach (char pOneLetter in Find_id("0").positive) {
            textDisplay.text += pOneLetter;

            //continueButton.SetActive(true);

            if (textDisplay.text == Find_id("0").question) {
                textDisplay.text = "";
                //continueButton.SetActive(false);
            }
            yield return new WaitForSeconds(typingSpeed);
        }
    }

    public void NextSentence() {

        //continueButton.SetActive(false);

        if (index < rowList.Count - 1) {
            index++;
            textDisplay.text = "";
            //textDisplay.text = Find_id("0").positive;
            StartCoroutine(Positive1());
        } else {
            textDisplay.text = "";
            //textDisplay.text = Find_id("0").negative;
            //continueButton.SetActive(false);
        }
    }

    public void FourFreedoms() {
        textDisplay.text = "";
        StartCoroutine(Question1());

        //textDisplay.text = Find_id("0").question;

        Debug.Log(Find_id("0").question);
    }

    public void SocialImpact() {
        textDisplay.text = Find_id("1").question;
        Debug.Log(Find_id("1").question);
    }

    public void Security() {
        textDisplay.text = Find_id("2").question;
        Debug.Log(Find_id("2").question);
    }

    public void Feelings() {
        textDisplay.text = Find_id("3").question;
        Debug.Log(Find_id("3").question);
    }

    public void JobsEconomy() {
        textDisplay.text = Find_id("4").question;
        Debug.Log(Find_id("4").question);
    }

    public void Sovereignty() {
        textDisplay.text = Find_id("5").question;
        Debug.Log(Find_id("5").question);
    }

    public void CulturalCloseness() {
        textDisplay.text = Find_id("6").question;
        Debug.Log(Find_id("6").question);
    }

    public void Environment() {
        textDisplay.text = Find_id("7").question;
        Debug.Log(Find_id("7").question);
    }

    public void FairTreatment() {
        textDisplay.text = Find_id("8").question;
        Debug.Log(Find_id("8").question);
    }
}